import{_ as e,c as s,o as a,d as l}from"./app.5afdac1a.js";const f=JSON.parse('{"title":"项目架构设计","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本的技术栈","slug":"基本的技术栈","link":"#基本的技术栈","children":[]},{"level":2,"title":"开箱即用的特性","slug":"开箱即用的特性","link":"#开箱即用的特性","children":[]},{"level":2,"title":"项目文件结构","slug":"项目文件结构","link":"#项目文件结构","children":[]},{"level":2,"title":"网络请求","slug":"网络请求","link":"#网络请求","children":[]},{"level":2,"title":"待补充...","slug":"待补充","link":"#待补充","children":[]}],"relativePath":"tutorial/design.md"}'),o={name:"tutorial/design.md"},i=l(`<h1 id="项目架构设计" tabindex="-1">项目架构设计 <a class="header-anchor" href="#项目架构设计" aria-hidden="true">#</a></h1><p>“架构设计没有银弹”，不存在所有业务领域都通用的最佳实践。</p><p>所以在项目架构方面，大多数团队都会构建自己的“东西”。采用统一的项目架构可以帮助我们快速理解项目，减少沟通成本，快速适应公司不同产品应用的开发工作。</p><p>下面提到的内容，是根据魔珐前端团队成员的技术栈提出的一套实践准则，也是开发新项目的基本要求，在此基础上再根据业务场景进行拓展开发。（使用 xmov cli 创建的项目都已默认实现）</p><h2 id="基本的技术栈" tabindex="-1">基本的技术栈 <a class="header-anchor" href="#基本的技术栈" aria-hidden="true">#</a></h2><ul><li><p>✨ <a href="https://cn.vitejs.dev/guide/" target="_blank" rel="noreferrer">构建工具：高效、快速的 Vite</a></p></li><li><p>🔥 <a href="https://github.com/vuejs/rfcs/pull/227" target="_blank" rel="noreferrer">前端框架：最时髦的 Vue3，使用新的 <code>&lt;script setup&gt;</code> 语法</a></p></li><li><p>🏆 <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">开发语言：政治正确 TypeScript</a></p></li><li><p>🍍 <a href="https://pinia.esm.dev/" target="_blank" rel="noreferrer">状态管理器：Vue3 新秀 Pinia</a></p></li><li><p>🎨 <a href="https://cn.windicss.org/guide/" target="_blank" rel="noreferrer">样式：原子化 Windi CSS</a></p></li><li><p>🚏 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noreferrer">路由管理：Vue Router</a></p></li><li><p>🚀 <a href="https://github.com/antfu/vueuse" target="_blank" rel="noreferrer">工具库：VueUse 实用的 Composition API 工具合集 </a></p></li></ul><h2 id="开箱即用的特性" tabindex="-1">开箱即用的特性 <a class="header-anchor" href="#开箱即用的特性" aria-hidden="true">#</a></h2><ul><li><p>📥 <a href="https://github.com/antfu/unplugin-auto-import" target="_blank" rel="noreferrer">组合式 Composition API 自动加载：unplugin-auto-import</a></p></li><li><p>📦 <a href="https://github.com/antfu/unplugin-vue-components" target="_blank" rel="noreferrer">组件自动化加载：unplugin-vue-components</a></p></li></ul><h2 id="项目文件结构" tabindex="-1">项目文件结构 <a class="header-anchor" href="#项目文件结构" aria-hidden="true">#</a></h2><p>虽然很难说某一种项目文件结构的组织方式一定比另外一种更好，但是领域驱动模型，各自只管各自的模块，顶层再来进行组装和分配。坚持根据特性区分命名目录。能提供限界上下文，将某些功能牢牢地锁在一个地方，开发某个功能时，只需要关心这个模块就够了</p><p>一般项目的<code>src</code> 文件夹都包括类似下面的结构：</p><ul><li><code>api</code> 全局的 api</li><li><code>assets</code> 资源文件夹可以包含所有静态文件，如图片资源、字体文件等</li><li><code>components</code> 整个应用程序中使用的公共组件</li><li><code>config</code> 全局配置</li><li><code>features</code> 基于不同业务功能特性的模块(可选)</li><li><code>hooks</code> 在整个应用程序中使用的公共 Hooks</li><li><code>lib</code> 二次导出的第三方库</li><li><code>pages</code> 页面视图</li><li><code>routes</code> 路由配置</li><li><code>services</code> 网络请求</li><li><code>stores</code> 全局状态 stores</li><li><code>test</code> <s>测试文件和 mock 服务</s></li><li><code>types</code> 全局类型定义文件</li><li><code>utils</code> 通用的工具函数</li></ul><p>同时，<code>pages</code> 文件夹下的代码，应该根据模块或领域进行分组，建立子文件夹。比如</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">├── pages                        // 页面文件夹</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── visual-human             // 虚拟人功能页面</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── index.vue            // 首页入口文件，组织不同模块</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── action-panel         // 特性-动作面板模块</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── takeover             // 特性-接管数字人模块</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── components           // 组件文件夹</span></span>
<span class="line"><span style="color:#A6ACCD;">            ├── action-card      // 动作卡片组件</span></span>
<span class="line"><span style="color:#A6ACCD;">            ├── control-bar      // 接管数字人的控制条组件</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── hooks                // 虚拟人功能相关 hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── store                // 可能用于不同模块状态管理的 store</span></span>
<span class="line"><span style="color:#A6ACCD;">├── ...                          // 其他页面</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这种结构支持项目的变化和增长。其关键是不要让应用的发展使其架构失效。基于模块的结构非常易于扩展，你只需在上面添加模块，而不会增加复杂性。</p><h2 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-hidden="true">#</a></h2><p>很多开发者都喜欢基于 axios 封装一层自己的网络请求层，但注意在设计网络请求层的过程中，一定要考虑减少团队内其他人的学习成本。</p><p><strong>⛑ 不要对 axios 进行过度的封装！</strong></p><p>目前魔珐的项目开发中，绝大部分情况下只需要实现这 3 点即可：</p><ol><li>根据项目的实际需求，增加<code>请求拦截器</code>与<code>响应拦截器</code><ul><li>请求拦截器：实现添加 <code>accessToken</code> 等</li><li>响应拦截器：实现统一提示；格式化返回数据，过期退出应用等</li></ul></li><li>设计统一的异常拦截处理器 <code>errorHandler</code></li><li>使用 <code>vueuse</code> 的 <code>useAxios</code> 的异步请求 hook，优雅管理请求状态</li></ol><p>🧑🏻‍💻 关于异步请求 Hook 的技术选项说明:</p><ul><li><p>vueuse 中的 <code>useFetch</code> 和 <code>useAxios</code> 是两个处理网络请求的 hook。<code>useFetch</code> 功能比较单一，只有请求体的一些基本功能。而 <code>useAxios</code> 有更多基于 <code>axios</code> 内置功能的封装。</p></li><li><p>其实 react 生态中知名的 Hooks 工具库 —— <code>ahooks</code> 里的 <code>useRequest</code>，相比 <code>useAxios</code> 有着更加丰富的功能，比如依赖刷新，防抖，节流，缓存等，可惜它没有 Vue 版本。</p></li><li><p>不过，在项目的绝大部分场景中使用<code>watch</code> API 以及节流防抖等方法配合 <code>useAxios</code> 就足以满足业务需求。如果有特殊需求，可以考虑自己添加<code>TanStack Query</code>等更强大的异步请求状态管理库。</p></li></ul><h2 id="待补充" tabindex="-1">待补充... <a class="header-anchor" href="#待补充" aria-hidden="true">#</a></h2>`,23),n=[i];function c(t,r,p,d,u,h){return a(),s("div",null,n)}const _=e(o,[["render",c]]);export{f as __pageData,_ as default};
